1. Создать папку с проектом
2. Создаем виртуальное окружение
3. Создать файл requirements.txt и описать зависимости
4. Установить зависимости при помощи pip install -r requirements.txt
5. Создать GitHub репозиторий
   Создать файл .gitignore
6. Инициализировать локальный репозиторий в папке проекта git init
7. Связать локальный и удаленный репозиторий при помощи
    git remote add название ссылка
8. Создание проекта Django django-admin startproject название_проекта .
9. Создаем приложение python manage.py startapp название_приложения
10. Регистрируем приложения в настройках проекта в INSTALLED_APPS
11. Создать базу данных
12. Указываем в settings.py настройки БД
    Настроить пути для media, подключить в urls
13. Определяем модель пользователя (Стандартная или своя)
    Необходимо решить каким способом будет логиниться пользователь (email, телефон, Учетные записи)
14. Если используем свою модель, регистрация ее в settings.py AUTH_USER_MODEL = 'приложение.модель'
15. Описываем все остальные модели
16. Делаем миграцию
    python manage.py makemigrations
    python manage.py migrate
17. Создаем суперпользователя
    python manage.py createsuperuser
18. Нужные модели зарегистрировать в admin.py
19. Создаем представления (view)
    Расставить уровни доступа (permission)
20. Создаем serializer
21. Указываем представлению нужный сеаризатор
22. Создаем url для вьюшки
23. Если используем viewset, то подключаем его через роутер
24. Система аутентификации - Token
    1. Подключаем приложение rest_framework.authtoken
    2. Подключаем сервис для активации (почта, смс)
    3. Регистрация
    4. Активация
    5. Log in - отдаем token пользователя
    6. Log out
25. Пагинация
26. Фильтрация
27. Поиск
28. Документация
________________________________________________________________________________________________________________________
Отдельный класс, связь между корзиной и товарами

